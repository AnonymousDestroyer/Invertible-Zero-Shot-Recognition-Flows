{"format": "torch", "nodes": [{"name": "transforms.0", "id": 140570835227216, "class_name": "AffineCoupling(\n  (nn): MLPR(\n    (nonlin): ReLU()\n    (in_layer): Linear(in_features=2, out_features=100, bias=True)\n    (out_layer): Linear(in_features=100, out_features=4, bias=True)\n    (layers): ModuleList(\n      (0): Linear(in_features=100, out_features=100, bias=True)\n      (1): Linear(in_features=100, out_features=100, bias=True)\n      (2): Linear(in_features=100, out_features=100, bias=True)\n      (3): Linear(in_features=100, out_features=100, bias=True)\n      (4): Linear(in_features=100, out_features=100, bias=True)\n      (5): Linear(in_features=100, out_features=100, bias=True)\n      (6): Linear(in_features=100, out_features=100, bias=True)\n      (7): Linear(in_features=100, out_features=100, bias=True)\n      (8): Linear(in_features=100, out_features=100, bias=True)\n      (9): Linear(in_features=100, out_features=100, bias=True)\n      (10): Linear(in_features=100, out_features=100, bias=True)\n      (11): Linear(in_features=100, out_features=100, bias=True)\n      (12): Linear(in_features=100, out_features=100, bias=True)\n      (13): Linear(in_features=100, out_features=100, bias=True)\n    )\n  )\n)", "parameters": [["nn.in_layer.weight", [100, 2]], ["nn.in_layer.bias", [100]], ["nn.out_layer.weight", [4, 100]], ["nn.out_layer.bias", [4]], ["nn.layers.0.weight", [100, 100]], ["nn.layers.0.bias", [100]], ["nn.layers.1.weight", [100, 100]], ["nn.layers.1.bias", [100]], ["nn.layers.2.weight", [100, 100]], ["nn.layers.2.bias", [100]], ["nn.layers.3.weight", [100, 100]], ["nn.layers.3.bias", [100]], ["nn.layers.4.weight", [100, 100]], ["nn.layers.4.bias", [100]], ["nn.layers.5.weight", [100, 100]], ["nn.layers.5.bias", [100]], ["nn.layers.6.weight", [100, 100]], ["nn.layers.6.bias", [100]], ["nn.layers.7.weight", [100, 100]], ["nn.layers.7.bias", [100]], ["nn.layers.8.weight", [100, 100]], ["nn.layers.8.bias", [100]], ["nn.layers.9.weight", [100, 100]], ["nn.layers.9.bias", [100]], ["nn.layers.10.weight", [100, 100]], ["nn.layers.10.bias", [100]], ["nn.layers.11.weight", [100, 100]], ["nn.layers.11.bias", [100]], ["nn.layers.12.weight", [100, 100]], ["nn.layers.12.bias", [100]], ["nn.layers.13.weight", [100, 100]], ["nn.layers.13.bias", [100]]], "output_shape": [[128, 4], [128]], "num_parameters": [200, 100, 400, 4, 10000, 100, 10000, 100, 10000, 100, 10000, 100, 10000, 100, 10000, 100, 10000, 100, 10000, 100, 10000, 100, 10000, 100, 10000, 100, 10000, 100, 10000, 100, 10000, 100]}, {"name": "transforms.1", "id": 140570835227920, "class_name": "ActNormBijectionCloud()", "parameters": [["shift", [1, 4]], ["log_scale", [1, 4]]], "output_shape": [[128, 4], [128]], "num_parameters": [4, 4]}, {"name": "transforms.2", "id": 140570835285648, "class_name": "FullCombiner()", "parameters": [["w", [4, 4]]], "output_shape": [[128, 4], []], "num_parameters": [16]}, {"name": "transforms.3", "id": 140570835285712, "class_name": "AffineCoupling(\n  (nn): MLPR(\n    (nonlin): ReLU()\n    (in_layer): Linear(in_features=2, out_features=100, bias=True)\n    (out_layer): Linear(in_features=100, out_features=4, bias=True)\n    (layers): ModuleList(\n      (0): Linear(in_features=100, out_features=100, bias=True)\n      (1): Linear(in_features=100, out_features=100, bias=True)\n      (2): Linear(in_features=100, out_features=100, bias=True)\n      (3): Linear(in_features=100, out_features=100, bias=True)\n      (4): Linear(in_features=100, out_features=100, bias=True)\n      (5): Linear(in_features=100, out_features=100, bias=True)\n      (6): Linear(in_features=100, out_features=100, bias=True)\n      (7): Linear(in_features=100, out_features=100, bias=True)\n      (8): Linear(in_features=100, out_features=100, bias=True)\n      (9): Linear(in_features=100, out_features=100, bias=True)\n      (10): Linear(in_features=100, out_features=100, bias=True)\n      (11): Linear(in_features=100, out_features=100, bias=True)\n      (12): Linear(in_features=100, out_features=100, bias=True)\n      (13): Linear(in_features=100, out_features=100, bias=True)\n    )\n  )\n)", "parameters": [["nn.in_layer.weight", [100, 2]], ["nn.in_layer.bias", [100]], ["nn.out_layer.weight", [4, 100]], ["nn.out_layer.bias", [4]], ["nn.layers.0.weight", [100, 100]], ["nn.layers.0.bias", [100]], ["nn.layers.1.weight", [100, 100]], ["nn.layers.1.bias", [100]], ["nn.layers.2.weight", [100, 100]], ["nn.layers.2.bias", [100]], ["nn.layers.3.weight", [100, 100]], ["nn.layers.3.bias", [100]], ["nn.layers.4.weight", [100, 100]], ["nn.layers.4.bias", [100]], ["nn.layers.5.weight", [100, 100]], ["nn.layers.5.bias", [100]], ["nn.layers.6.weight", [100, 100]], ["nn.layers.6.bias", [100]], ["nn.layers.7.weight", [100, 100]], ["nn.layers.7.bias", [100]], ["nn.layers.8.weight", [100, 100]], ["nn.layers.8.bias", [100]], ["nn.layers.9.weight", [100, 100]], ["nn.layers.9.bias", [100]], ["nn.layers.10.weight", [100, 100]], ["nn.layers.10.bias", [100]], ["nn.layers.11.weight", [100, 100]], ["nn.layers.11.bias", [100]], ["nn.layers.12.weight", [100, 100]], ["nn.layers.12.bias", [100]], ["nn.layers.13.weight", [100, 100]], ["nn.layers.13.bias", [100]]], "output_shape": [[128, 4], [128]], "num_parameters": [200, 100, 400, 4, 10000, 100, 10000, 100, 10000, 100, 10000, 100, 10000, 100, 10000, 100, 10000, 100, 10000, 100, 10000, 100, 10000, 100, 10000, 100, 10000, 100, 10000, 100, 10000, 100]}, {"name": "transforms.4", "id": 140570835285904, "class_name": "ActNormBijectionCloud()", "parameters": [["shift", [1, 4]], ["log_scale", [1, 4]]], "output_shape": [[128, 4], [128]], "num_parameters": [4, 4]}, {"name": "transforms.5", "id": 140570834797840, "class_name": "FullCombiner()", "parameters": [["w", [4, 4]]], "output_shape": [[128, 4], []], "num_parameters": [16]}, {"name": "transforms.6", "id": 140570834798032, "class_name": "AffineCoupling(\n  (nn): MLPR(\n    (nonlin): ReLU()\n    (in_layer): Linear(in_features=2, out_features=100, bias=True)\n    (out_layer): Linear(in_features=100, out_features=4, bias=True)\n    (layers): ModuleList(\n      (0): Linear(in_features=100, out_features=100, bias=True)\n      (1): Linear(in_features=100, out_features=100, bias=True)\n      (2): Linear(in_features=100, out_features=100, bias=True)\n      (3): Linear(in_features=100, out_features=100, bias=True)\n      (4): Linear(in_features=100, out_features=100, bias=True)\n      (5): Linear(in_features=100, out_features=100, bias=True)\n      (6): Linear(in_features=100, out_features=100, bias=True)\n      (7): Linear(in_features=100, out_features=100, bias=True)\n      (8): Linear(in_features=100, out_features=100, bias=True)\n      (9): Linear(in_features=100, out_features=100, bias=True)\n      (10): Linear(in_features=100, out_features=100, bias=True)\n      (11): Linear(in_features=100, out_features=100, bias=True)\n      (12): Linear(in_features=100, out_features=100, bias=True)\n      (13): Linear(in_features=100, out_features=100, bias=True)\n    )\n  )\n)", "parameters": [["nn.in_layer.weight", [100, 2]], ["nn.in_layer.bias", [100]], ["nn.out_layer.weight", [4, 100]], ["nn.out_layer.bias", [4]], ["nn.layers.0.weight", [100, 100]], ["nn.layers.0.bias", [100]], ["nn.layers.1.weight", [100, 100]], ["nn.layers.1.bias", [100]], ["nn.layers.2.weight", [100, 100]], ["nn.layers.2.bias", [100]], ["nn.layers.3.weight", [100, 100]], ["nn.layers.3.bias", [100]], ["nn.layers.4.weight", [100, 100]], ["nn.layers.4.bias", [100]], ["nn.layers.5.weight", [100, 100]], ["nn.layers.5.bias", [100]], ["nn.layers.6.weight", [100, 100]], ["nn.layers.6.bias", [100]], ["nn.layers.7.weight", [100, 100]], ["nn.layers.7.bias", [100]], ["nn.layers.8.weight", [100, 100]], ["nn.layers.8.bias", [100]], ["nn.layers.9.weight", [100, 100]], ["nn.layers.9.bias", [100]], ["nn.layers.10.weight", [100, 100]], ["nn.layers.10.bias", [100]], ["nn.layers.11.weight", [100, 100]], ["nn.layers.11.bias", [100]], ["nn.layers.12.weight", [100, 100]], ["nn.layers.12.bias", [100]], ["nn.layers.13.weight", [100, 100]], ["nn.layers.13.bias", [100]]], "output_shape": [[128, 4], [128]], "num_parameters": [200, 100, 400, 4, 10000, 100, 10000, 100, 10000, 100, 10000, 100, 10000, 100, 10000, 100, 10000, 100, 10000, 100, 10000, 100, 10000, 100, 10000, 100, 10000, 100, 10000, 100, 10000, 100]}, {"name": "transforms.7", "id": 140570834798160, "class_name": "ActNormBijectionCloud()", "parameters": [["shift", [1, 4]], ["log_scale", [1, 4]]], "output_shape": [[128, 4], [128]], "num_parameters": [4, 4]}, {"name": "transforms.8", "id": 140570834359184, "class_name": "FullCombiner()", "parameters": [["w", [4, 4]]], "output_shape": [[128, 4], []], "num_parameters": [16]}, {"name": "transforms.9", "id": 140570834359248, "class_name": "AffineCoupling(\n  (nn): MLPR(\n    (nonlin): ReLU()\n    (in_layer): Linear(in_features=2, out_features=100, bias=True)\n    (out_layer): Linear(in_features=100, out_features=4, bias=True)\n    (layers): ModuleList(\n      (0): Linear(in_features=100, out_features=100, bias=True)\n      (1): Linear(in_features=100, out_features=100, bias=True)\n      (2): Linear(in_features=100, out_features=100, bias=True)\n      (3): Linear(in_features=100, out_features=100, bias=True)\n      (4): Linear(in_features=100, out_features=100, bias=True)\n      (5): Linear(in_features=100, out_features=100, bias=True)\n      (6): Linear(in_features=100, out_features=100, bias=True)\n      (7): Linear(in_features=100, out_features=100, bias=True)\n      (8): Linear(in_features=100, out_features=100, bias=True)\n      (9): Linear(in_features=100, out_features=100, bias=True)\n      (10): Linear(in_features=100, out_features=100, bias=True)\n      (11): Linear(in_features=100, out_features=100, bias=True)\n      (12): Linear(in_features=100, out_features=100, bias=True)\n      (13): Linear(in_features=100, out_features=100, bias=True)\n    )\n  )\n)", "parameters": [["nn.in_layer.weight", [100, 2]], ["nn.in_layer.bias", [100]], ["nn.out_layer.weight", [4, 100]], ["nn.out_layer.bias", [4]], ["nn.layers.0.weight", [100, 100]], ["nn.layers.0.bias", [100]], ["nn.layers.1.weight", [100, 100]], ["nn.layers.1.bias", [100]], ["nn.layers.2.weight", [100, 100]], ["nn.layers.2.bias", [100]], ["nn.layers.3.weight", [100, 100]], ["nn.layers.3.bias", [100]], ["nn.layers.4.weight", [100, 100]], ["nn.layers.4.bias", [100]], ["nn.layers.5.weight", [100, 100]], ["nn.layers.5.bias", [100]], ["nn.layers.6.weight", [100, 100]], ["nn.layers.6.bias", [100]], ["nn.layers.7.weight", [100, 100]], ["nn.layers.7.bias", [100]], ["nn.layers.8.weight", [100, 100]], ["nn.layers.8.bias", [100]], ["nn.layers.9.weight", [100, 100]], ["nn.layers.9.bias", [100]], ["nn.layers.10.weight", [100, 100]], ["nn.layers.10.bias", [100]], ["nn.layers.11.weight", [100, 100]], ["nn.layers.11.bias", [100]], ["nn.layers.12.weight", [100, 100]], ["nn.layers.12.bias", [100]], ["nn.layers.13.weight", [100, 100]], ["nn.layers.13.bias", [100]]], "output_shape": [[128, 4], [128]], "num_parameters": [200, 100, 400, 4, 10000, 100, 10000, 100, 10000, 100, 10000, 100, 10000, 100, 10000, 100, 10000, 100, 10000, 100, 10000, 100, 10000, 100, 10000, 100, 10000, 100, 10000, 100, 10000, 100]}, {"name": "transforms.10", "id": 140570834359440, "class_name": "ActNormBijectionCloud()", "parameters": [["shift", [1, 4]], ["log_scale", [1, 4]]], "output_shape": [[128, 4], [128]], "num_parameters": [4, 4]}, {"name": "transforms.11", "id": 140570834432464, "class_name": "FullCombiner()", "parameters": [["w", [4, 4]]], "output_shape": [[128, 4], []], "num_parameters": [16]}, {"name": "transforms.12", "id": 140570834432656, "class_name": "AffineCoupling(\n  (nn): MLPR(\n    (nonlin): ReLU()\n    (in_layer): Linear(in_features=2, out_features=100, bias=True)\n    (out_layer): Linear(in_features=100, out_features=4, bias=True)\n    (layers): ModuleList(\n      (0): Linear(in_features=100, out_features=100, bias=True)\n      (1): Linear(in_features=100, out_features=100, bias=True)\n      (2): Linear(in_features=100, out_features=100, bias=True)\n      (3): Linear(in_features=100, out_features=100, bias=True)\n      (4): Linear(in_features=100, out_features=100, bias=True)\n      (5): Linear(in_features=100, out_features=100, bias=True)\n      (6): Linear(in_features=100, out_features=100, bias=True)\n      (7): Linear(in_features=100, out_features=100, bias=True)\n      (8): Linear(in_features=100, out_features=100, bias=True)\n      (9): Linear(in_features=100, out_features=100, bias=True)\n      (10): Linear(in_features=100, out_features=100, bias=True)\n      (11): Linear(in_features=100, out_features=100, bias=True)\n      (12): Linear(in_features=100, out_features=100, bias=True)\n      (13): Linear(in_features=100, out_features=100, bias=True)\n    )\n  )\n)", "parameters": [["nn.in_layer.weight", [100, 2]], ["nn.in_layer.bias", [100]], ["nn.out_layer.weight", [4, 100]], ["nn.out_layer.bias", [4]], ["nn.layers.0.weight", [100, 100]], ["nn.layers.0.bias", [100]], ["nn.layers.1.weight", [100, 100]], ["nn.layers.1.bias", [100]], ["nn.layers.2.weight", [100, 100]], ["nn.layers.2.bias", [100]], ["nn.layers.3.weight", [100, 100]], ["nn.layers.3.bias", [100]], ["nn.layers.4.weight", [100, 100]], ["nn.layers.4.bias", [100]], ["nn.layers.5.weight", [100, 100]], ["nn.layers.5.bias", [100]], ["nn.layers.6.weight", [100, 100]], ["nn.layers.6.bias", [100]], ["nn.layers.7.weight", [100, 100]], ["nn.layers.7.bias", [100]], ["nn.layers.8.weight", [100, 100]], ["nn.layers.8.bias", [100]], ["nn.layers.9.weight", [100, 100]], ["nn.layers.9.bias", [100]], ["nn.layers.10.weight", [100, 100]], ["nn.layers.10.bias", [100]], ["nn.layers.11.weight", [100, 100]], ["nn.layers.11.bias", [100]], ["nn.layers.12.weight", [100, 100]], ["nn.layers.12.bias", [100]], ["nn.layers.13.weight", [100, 100]], ["nn.layers.13.bias", [100]]], "output_shape": [[128, 4], [128]], "num_parameters": [200, 100, 400, 4, 10000, 100, 10000, 100, 10000, 100, 10000, 100, 10000, 100, 10000, 100, 10000, 100, 10000, 100, 10000, 100, 10000, 100, 10000, 100, 10000, 100, 10000, 100, 10000, 100]}], "edges": []}