{"format": "torch", "nodes": [{"name": "transforms.0", "id": 139857056426448, "class_name": "ActNormBijectionCloud()", "parameters": [["shift", [1, 4]], ["log_scale", [1, 4]]], "output_shape": [[256, 4], [256]], "num_parameters": [4, 4]}, {"name": "transforms.1", "id": 139857970372752, "class_name": "AffineCoupling(\n  (nn_s): MLP(\n    (non_linearity): LeakyReLU(negative_slope=0.01)\n    (in_layer): Linear(in_features=2, out_features=2, bias=True)\n    (out_layer): Linear(in_features=2, out_features=2, bias=True)\n    (layers): ModuleList()\n  )\n  (nn_t): MLP(\n    (non_linearity): LeakyReLU(negative_slope=0.01)\n    (in_layer): Linear(in_features=2, out_features=2, bias=True)\n    (out_layer): Linear(in_features=2, out_features=2, bias=True)\n    (layers): ModuleList()\n  )\n)", "parameters": [["nn_s.in_layer.weight", [2, 2]], ["nn_s.in_layer.bias", [2]], ["nn_s.out_layer.weight", [2, 2]], ["nn_s.out_layer.bias", [2]], ["nn_t.in_layer.weight", [2, 2]], ["nn_t.in_layer.bias", [2]], ["nn_t.out_layer.weight", [2, 2]], ["nn_t.out_layer.bias", [2]]], "output_shape": [[256, 4], [256]], "num_parameters": [4, 2, 4, 2, 4, 2, 4, 2]}, {"name": "transforms.2", "id": 139859887537744, "class_name": "ActNormBijectionCloud()", "parameters": [["shift", [1, 4]], ["log_scale", [1, 4]]], "output_shape": [[256, 4], [256]], "num_parameters": [4, 4]}, {"name": "transforms.3", "id": 139859887537168, "class_name": "Reverse()", "parameters": [], "output_shape": [[256, 4], [256]], "num_parameters": []}, {"name": "transforms.4", "id": 139859887537360, "class_name": "AffineCoupling(\n  (nn_s): MLP(\n    (non_linearity): LeakyReLU(negative_slope=0.01)\n    (in_layer): Linear(in_features=2, out_features=2, bias=True)\n    (out_layer): Linear(in_features=2, out_features=2, bias=True)\n    (layers): ModuleList()\n  )\n  (nn_t): MLP(\n    (non_linearity): LeakyReLU(negative_slope=0.01)\n    (in_layer): Linear(in_features=2, out_features=2, bias=True)\n    (out_layer): Linear(in_features=2, out_features=2, bias=True)\n    (layers): ModuleList()\n  )\n)", "parameters": [["nn_s.in_layer.weight", [2, 2]], ["nn_s.in_layer.bias", [2]], ["nn_s.out_layer.weight", [2, 2]], ["nn_s.out_layer.bias", [2]], ["nn_t.in_layer.weight", [2, 2]], ["nn_t.in_layer.bias", [2]], ["nn_t.out_layer.weight", [2, 2]], ["nn_t.out_layer.bias", [2]]], "output_shape": [[256, 4], [256]], "num_parameters": [4, 2, 4, 2, 4, 2, 4, 2]}, {"name": "transforms.5", "id": 139859887536080, "class_name": "ActNormBijectionCloud()", "parameters": [["shift", [1, 4]], ["log_scale", [1, 4]]], "output_shape": [[256, 4], [256]], "num_parameters": [4, 4]}, {"name": "transforms.6", "id": 139859887535248, "class_name": "Reverse()", "parameters": [], "output_shape": [[256, 4], [256]], "num_parameters": []}, {"name": "transforms.7", "id": 139859887535440, "class_name": "AffineCoupling(\n  (nn_s): MLP(\n    (non_linearity): LeakyReLU(negative_slope=0.01)\n    (in_layer): Linear(in_features=2, out_features=2, bias=True)\n    (out_layer): Linear(in_features=2, out_features=2, bias=True)\n    (layers): ModuleList()\n  )\n  (nn_t): MLP(\n    (non_linearity): LeakyReLU(negative_slope=0.01)\n    (in_layer): Linear(in_features=2, out_features=2, bias=True)\n    (out_layer): Linear(in_features=2, out_features=2, bias=True)\n    (layers): ModuleList()\n  )\n)", "parameters": [["nn_s.in_layer.weight", [2, 2]], ["nn_s.in_layer.bias", [2]], ["nn_s.out_layer.weight", [2, 2]], ["nn_s.out_layer.bias", [2]], ["nn_t.in_layer.weight", [2, 2]], ["nn_t.in_layer.bias", [2]], ["nn_t.out_layer.weight", [2, 2]], ["nn_t.out_layer.bias", [2]]], "output_shape": [[256, 4], [256]], "num_parameters": [4, 2, 4, 2, 4, 2, 4, 2]}, {"name": "transforms.8", "id": 139859887534544, "class_name": "ActNormBijectionCloud()", "parameters": [["shift", [1, 4]], ["log_scale", [1, 4]]], "output_shape": [[256, 4], [256]], "num_parameters": [4, 4]}, {"name": "transforms.9", "id": 139859887536016, "class_name": "Reverse()", "parameters": [], "output_shape": [[256, 4], [256]], "num_parameters": []}, {"name": "transforms.10", "id": 139860110171216, "class_name": "AffineCoupling(\n  (nn_s): MLP(\n    (non_linearity): LeakyReLU(negative_slope=0.01)\n    (in_layer): Linear(in_features=2, out_features=2, bias=True)\n    (out_layer): Linear(in_features=2, out_features=2, bias=True)\n    (layers): ModuleList()\n  )\n  (nn_t): MLP(\n    (non_linearity): LeakyReLU(negative_slope=0.01)\n    (in_layer): Linear(in_features=2, out_features=2, bias=True)\n    (out_layer): Linear(in_features=2, out_features=2, bias=True)\n    (layers): ModuleList()\n  )\n)", "parameters": [["nn_s.in_layer.weight", [2, 2]], ["nn_s.in_layer.bias", [2]], ["nn_s.out_layer.weight", [2, 2]], ["nn_s.out_layer.bias", [2]], ["nn_t.in_layer.weight", [2, 2]], ["nn_t.in_layer.bias", [2]], ["nn_t.out_layer.weight", [2, 2]], ["nn_t.out_layer.bias", [2]]], "output_shape": [[256, 4], [256]], "num_parameters": [4, 2, 4, 2, 4, 2, 4, 2]}, {"name": "transforms.11", "id": 139859887624976, "class_name": "ActNormBijectionCloud()", "parameters": [["shift", [1, 4]], ["log_scale", [1, 4]]], "output_shape": [[256, 4], [256]], "num_parameters": [4, 4]}, {"name": "transforms.12", "id": 139859887625552, "class_name": "Reverse()", "parameters": [], "output_shape": [[256, 4], [256]], "num_parameters": []}, {"name": "transforms.13", "id": 139859887625744, "class_name": "AffineCoupling(\n  (nn_s): MLP(\n    (non_linearity): LeakyReLU(negative_slope=0.01)\n    (in_layer): Linear(in_features=2, out_features=2, bias=True)\n    (out_layer): Linear(in_features=2, out_features=2, bias=True)\n    (layers): ModuleList()\n  )\n  (nn_t): MLP(\n    (non_linearity): LeakyReLU(negative_slope=0.01)\n    (in_layer): Linear(in_features=2, out_features=2, bias=True)\n    (out_layer): Linear(in_features=2, out_features=2, bias=True)\n    (layers): ModuleList()\n  )\n)", "parameters": [["nn_s.in_layer.weight", [2, 2]], ["nn_s.in_layer.bias", [2]], ["nn_s.out_layer.weight", [2, 2]], ["nn_s.out_layer.bias", [2]], ["nn_t.in_layer.weight", [2, 2]], ["nn_t.in_layer.bias", [2]], ["nn_t.out_layer.weight", [2, 2]], ["nn_t.out_layer.bias", [2]]], "output_shape": [[256, 4], [256]], "num_parameters": [4, 2, 4, 2, 4, 2, 4, 2]}], "edges": []}